include_guard()

if (NOT CMAKE_SYSTEM_PROCESSOR)
    set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif()

if(NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ${CMAKE_HOST_SYSTEM_PROCESSOR}))
    set(CMAKE_SYSTEM_NAME Windows)
endif()


# Detect host architecture to pick up proper toolchain path
if (NOT CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE)
    if (CMAKE_HOST_SYSTEM_PROSSOR STREQUAL ARM64)
        set(CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE arm64)
    else()
        set(CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE x64)
    endif()
endif()

message(STATUS "id: '${TOOLCHAIN_MSVC_VERSION}'")

set(TOOLCHAIN_MSVC_PATH "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/${TOOLCHAIN_MSVC_VERSION}/bin/Host${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}/${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}/")


set(CMAKE_C_COMPILER    "${TOOLCHAIN_MSVC_PATH}/cl.exe")
set(CMAKE_CXX_COMPILER  "${TOOLCHAIN_MSVC_PATH}/cl.exe")
set(CMAKE_LINKER        "${TOOLCHAIN_MSVC_PATH}/link.exe")
set(CMAKE_AR            "${TOOLCHAIN_MSVC_PATH}/lib.exe")

set(TOOLCHAIN_COMMON_COMPILER_FLAGS
    "-Zf -ZH:SHA_256 -external:anglebrackets -external:W0 -utf-8 -DUNICODE -D_UNICODE -diagnostics:caret -bigobj -cgthreads8 -FC -GF -GR"
)

set(TOOLCHAIN_COMMON_CXX_FLAGS
    "-fp:fast -permissive- -volatile:iso -Zc:__cplusplus -Zc:inline -Zc:preprocessor -Zc:lambda -Zc:checkGwOdr -Zc:referenceBinding -Zc:rvalueCast -Zc:strictStrings -Zc:ternary -Zc:wchar_t -Zc:forScope -Zc:enumTypes -Zc:externConstexpr -Zc:throwingNew -MP"
)

set(TOOLCHAIN_COMMON_C_FLAGS)

if (CMAKE_CXX_COMPILER_ARCHITECTURE_ID STREQUAL "arm64")
    set(TOOLCHAIN_COMMON_COMPILER_FLAGS "${TOOLCHAIN_COMMON_COMPILER_FLAGS} -arch:armv8.1")
endif()

if (CMAKE_CXX_COMPILER_ARCHITECTURE_ID STREQUAL "x64")
    set(TOOLCHAIN_COMMON_COMPILER_FLAGS "${TOOLCHAIN_COMMON_COMPILER_FLAGS} -arch:AVX -favor:AMD64 -fpcvt:IA -jumptablerdata")
endif()

set(CMAKE_CXX_FLAGS_INIT "${TOOLCHAIN_COMMON_COMPILER_FLAGS} ${TOOLCHAIN_COMMON_CXX_FLAGS}")
set(CMAKE_C_FLAGS_INIT   "${TOOLCHAIN_COMMON_COMPILER_FLAGS} ${TOOLCHAIN_COMMON_C_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "")

set(TOOLCHAIN_COMPILER_DEBUG_FLAGS      "-RTC1     -Od -Ob0           -D_DEBUG -sdl             -JMC  -GS")
set(TOOLCHAIN_COMPILER_DEVELOPER_FLAGS  "-RTC1 -Zo -O2 -Ob1           -DNDEBUG -sdl- -guard:cf- -JMC- -GS-     -Gy -Gw")
set(TOOLCHAIN_COMPILER_PROFILING_FLAGS  "          -O2 -Ob3 -Oi -Qpar -DNDEBUG -sdl- -guard:cf- -JMC- -GS- -GL -Gy -Gw")
set(TOOLCHAIN_COMPILER_SHIPPING_FLAGS   "          -O2 -Ob3 -Oi -Qpar -DNDEBUG -sdl- -guard:cf- -JMC- -GS- -GL -Gy -Gw")

set(TOOLCHAIN_LINK_DEBUG_FLAGS          "-DEBUG -INCREMENTAL    -OPT:NOREF -OPT:NOICF")
set(TOOLCHAIN_LINK_DEVELOPER_FLAGS      "-DEBUG -INCREMENTAL:NO -OPT:NOREF -OPT:NOICF -LTCG")
set(TOOLCHAIN_LINK_PROFILING_FLAGS      "-DEBUG -INCREMENTAL:NO -OPT:REF   -OPT:ICF   -LTCG")
set(TOOLCHAIN_LINK_SHIPPING_FLAGS       "-DEBUG -INCREMENTAL:NO -OPT:REF   -OPT:ICF   -LTCG")

set(CMAKE_C_FLAGS_DEBUG                 "${TOOLCHAIN_COMPILER_DEBUG_FLAGS}")
set(CMAKE_C_FLAGS_DEVELOPER             "${TOOLCHAIN_COMPILER_DEVELOPER_FLAGS}")
set(CMAKE_C_FLAGS_PROFILING             "${TOOLCHAIN_COMPILER_PROFILING_FLAGS}")
set(CMAKE_C_FLAGS_SHIPPING              "${TOOLCHAIN_COMPILER_SHIPPING_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG               "${TOOLCHAIN_COMPILER_DEBUG_FLAGS}")
set(CMAKE_CXX_FLAGS_DEVELOPER           "${TOOLCHAIN_COMPILER_DEVELOPER_FLAGS}")
set(CMAKE_CXX_FLAGS_PROFILING           "${TOOLCHAIN_COMPILER_PROFILING_FLAGS}")
set(CMAKE_CXX_FLAGS_SHIPPING            "${TOOLCHAIN_COMPILER_SHIPPING_FLAGS}")

set(CMAKE_EXE_LINKER_FLAGS_DEBUG        "${TOOLCHAIN_LINK_DEBUG_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_DEVELOPER    "${TOOLCHAIN_LINK_DEVELOPER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_PROFILING    "${TOOLCHAIN_LINK_PROFILING_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_SHIPPING     "${TOOLCHAIN_LINK_SHIPPING_FLAGS}")

set(CMAKE_SHARED_LINKER_FLAGS_DEBUG     "${TOOLCHAIN_LINK_DEBUG_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_DEVELOPER "${TOOLCHAIN_LINK_DEVELOPER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILING "${TOOLCHAIN_LINK_PROFILING_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_SHIPPING  "${TOOLCHAIN_LINK_SHIPPING_FLAGS}")
