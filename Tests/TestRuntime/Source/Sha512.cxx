#include "AnemoneRuntime/Platform/Detect.hxx"
#include "AnemoneRuntime/Crypto/Sha512.hxx"

ANEMONE_EXTERNAL_HEADERS_BEGIN

#include <catch_amalgamated.hpp>

ANEMONE_EXTERNAL_HEADERS_END

TEST_CASE("Cryptography Sha512")
{
    using namespace Anemone::Crypto;

    Sha512Context context{};

    SECTION("Emtpy")
    {
        sha512_initialize(context);
        auto const hash = sha512_finalize(context);

        constexpr uint8_t expected[]{
            0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
            0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
            0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
            0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e};

        for (size_t i = 0; i < hash.size(); ++i)
        {
            REQUIRE(hash[i] == expected[i]);
        }
    }

    SECTION("foobar")
    {
        sha512_initialize(context);
        sha512_update(context, std::as_bytes(std::span{std::string_view{"foobar"}}));
        auto const hash = sha512_finalize(context);

        constexpr uint8_t expected[]{
            0x0a, 0x50, 0x26, 0x1e, 0xbd, 0x1a, 0x39, 0x0f, 0xed, 0x2b, 0xf3, 0x26, 0xf2, 0x67, 0x3c, 0x14,
            0x55, 0x82, 0xa6, 0x34, 0x2d, 0x52, 0x32, 0x04, 0x97, 0x3d, 0x02, 0x19, 0x33, 0x7f, 0x81, 0x61,
            0x6a, 0x80, 0x69, 0xb0, 0x12, 0x58, 0x7c, 0xf5, 0x63, 0x5f, 0x69, 0x25, 0xf1, 0xb5, 0x6c, 0x36,
            0x02, 0x30, 0xc1, 0x9b, 0x27, 0x35, 0x00, 0xee, 0x01, 0x3e, 0x03, 0x06, 0x01, 0xbf, 0x24, 0x25};

        for (size_t i = 0; i < hash.size(); ++i)
        {
            REQUIRE(hash[i] == expected[i]);
        }
    }

    SECTION("binary data / 32 bytes")
    {
        constexpr uint8_t source[]{
            0x0a, 0x50, 0x26, 0x1e, 0xbd, 0x1a, 0x39, 0x0f, 0xed, 0x2b, 0xf3, 0x26, 0xf2, 0x67, 0x3c, 0x14,
            0x55, 0x82, 0xa6, 0x34, 0x2d, 0x52, 0x32, 0x04, 0x97, 0x3d, 0x02, 0x19, 0x33, 0x7f, 0x81, 0x61,
            0x6a, 0x80, 0x69, 0xb0, 0x12, 0x58, 0x7c, 0xf5, 0x63, 0x5f, 0x69, 0x25, 0xf1, 0xb5, 0x6c, 0x36,
            0x02, 0x30, 0xc1, 0x9b, 0x27, 0x35, 0x00, 0xee, 0x01, 0x3e, 0x03, 0x06, 0x01, 0xbf, 0x24, 0x25};

        sha512_initialize(context);
        sha512_update(context, std::as_bytes(std::span{source}));
        auto const hash = sha512_finalize(context);

        constexpr uint8_t expected[]{
            0x0f, 0xd7, 0x54, 0x87, 0x58, 0x07, 0x87, 0x9f, 0xfc, 0x5b, 0xfd, 0xd5, 0x22, 0x45, 0x31, 0x10,
            0x62, 0x92, 0x4b, 0xeb, 0xd3, 0x1d, 0x56, 0x03, 0x6c, 0xa5, 0x31, 0x34, 0x0e, 0x55, 0x23, 0x8b,
            0x19, 0x04, 0x4f, 0x51, 0x82, 0x8a, 0xe9, 0x3a, 0xcb, 0x0a, 0x21, 0x47, 0xc6, 0xa4, 0x79, 0x3b,
            0x90, 0xcb, 0xa9, 0xee, 0x77, 0x50, 0x67, 0x14, 0x6c, 0x64, 0xb5, 0xf4, 0xdd, 0x85, 0x99, 0xfd};

        for (size_t i = 0; i < hash.size(); ++i)
        {
            REQUIRE(hash[i] == expected[i]);
        }
    }

    SECTION("Quick Brown Fox")
    {
        constexpr std::string_view source1{"The quick brown fox "};
        constexpr std::string_view source2{"jumps over the lazy dog.\n"};

        sha512_initialize(context);

        for (size_t i = 0; i < 16; ++i)
        {
            sha512_update(context, std::as_bytes(std::span{source1}));
            sha512_update(context, std::as_bytes(std::span{source2}));
        }

        auto const hash = sha512_finalize(context);

        constexpr uint8_t expected[]{
            0xae, 0x50, 0x31, 0x66, 0xd9, 0xdc, 0x0c, 0x79, 0x63, 0x42, 0x0f, 0x90, 0xc0, 0x27, 0xff, 0x71,
            0x86, 0x75, 0x96, 0xde, 0xc6, 0xed, 0x16, 0xe7, 0xcb, 0x1b, 0x23, 0x8d, 0xec, 0x0f, 0xa0, 0x6f,
            0xd6, 0x8f, 0xbc, 0xbe, 0xf0, 0x55, 0x2a, 0x48, 0x89, 0x8e, 0x2d, 0x39, 0x04, 0x5b, 0x38, 0xee,
            0x3c, 0x41, 0xd4, 0xb7, 0x6f, 0x13, 0xe1, 0x1e, 0xa3, 0x64, 0x54, 0x22, 0x02, 0x4c, 0xce, 0x27
        };

        for (size_t i = 0; i < hash.size(); ++i)
        {
            REQUIRE(hash[i] == expected[i]);
        }
    }
}
